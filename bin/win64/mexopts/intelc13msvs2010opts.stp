# $Revision: 1.1.6.2 $  $Date: 2013/04/25 04:23:12 $
#  Copyright 2012 The MathWorks, Inc.

use mexutils;

sub intelc13msvs2010opts 
{
    #===================================================================
    # intelc13opts: Define where the Intel C++ compiler 13.0 is
    # installed.  Also sets language, version, and environment variables.
    #===================================================================

    my $input = shift;
    # This is where the vendor installs the compiler by default
    my $default_location = "C:\\Program Files (x86)\\Intel\\Composer XE 2013";
                            
    # Return language/technology this compiler compiles.
    my @language_handled = ('C');    
    
    # Find MSVC100
    my $msvc100_record = callstpfile($input->{'matlab_bin'}."/mexopts/","msvc100opts.stp");
    my $msvc100_location_fcn = $msvc100_record->{"locate"};
    my @msvc100_locations = &$msvc100_location_fcn;
    my $msvc100_dir = pop @msvc100_locations;
    my $msvc100_sdk_dir = $msvc100_record->{"link_val"};
    
    my $locate_fcn = sub {
        #===================================================================
        # locate_fcn: A local function to return potential location where this compiler
        # is installed.  The return value is used to set the COMPILER_ROOT 
        # directory. It makes three guesses: The system path, the registry, and
        # the default location where the compiler tries to install itself.
        #===================================================================

        my @valid_locations = ();
        my $registry_lookup_fcn = $input->{"registry_lookup"};
        my $candidate_location;

        my $is_valid_root_fcn = sub {
            my $candidate_location = shift;
            my $isvalid = 0;
            if ($candidate_location ne "" &&  
                -e "$candidate_location\\Bin\\Intel64\\icl.exe"){
                if (&correct_version("$candidate_location\\Bin\\Intel64\\icl.exe","13.")){
                    $isvalid = 1;
                }
            }
            return $isvalid;
        };

        # Search the default environment variable location.
        $candidate_location = $ENV{'ICPP_COMPILER13'};
        if (&$is_valid_root_fcn($candidate_location)) {
            push(@valid_locations, $candidate_location);
        }

        # Search the registry.
        # The 32-bit version of Perl will always query for keys in 
        # SOFTWARE\\Wow6432Node instead of just SOFTWARE\\.
        # This is fine since Intel C++ is a 32-bit app
        $candidate_location = find_highest_build_of( "intel_c_13", "13[0-9]" );
        if (&$is_valid_root_fcn($candidate_location)) {
            push(@valid_locations, $candidate_location);
        }

        # Search the default install location.
        $candidate_location = $default_location;
        if (&$is_valid_root_fcn($candidate_location)) {
            push(@valid_locations, $candidate_location);
        }

        return @valid_locations;
   };


    my $root_val = sub {
        my $base_directory = shift;
        my $err_msg;
        if (!$msvc100_dir){       
            $err_msg = "\nError: Microsoft Visual Studio 2010 Professional Edition was not found\n".
                         "       by mex -setup.\n" .
                         "       The Microsoft Visual Studio 2010 Professional Edition linker is\n".
                         "       required to build Intel C++ MEX-files.  Please make sure that\n" .
                         "       Microsoft Visual Studio 2010 Professional Edition is installed\n" .
                         "       properly.\n\n";
        }

        return $err_msg;
    };


    return {
        "vendor_name"      => "Intel C++",
        "version"          => "13.0",
        "group_id"         => "INTELC",
        "serial"           => 13.0,
        "root_var"         => "ICPP_COMPILER13",
        "optfile_name"     => "intelc13msvs2010opts.bat",
        "linker_optfile_name" => "msvc100opts",
        "default_location" => $default_location,
        "language_handled" => \@language_handled,
        "root_val"         => $root_val,
        "link_val"         => $msvc100_sdk_dir,
        "locate"           => $locate_fcn,
        };
}
1;
